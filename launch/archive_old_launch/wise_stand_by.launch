<?xml version="1.0"?>

<launch>
    <arg name="name" default="bebop"/>
    <arg name="plotName" default="bebopPlots"/>
    <arg name="x" default="0.0" />
    <arg name="y" default="0.0" />
    <arg name="z" default="0.0" />
    <arg name="use_sim_time" default="true"/>
    <arg name="world_name" default="basic"/>
    <arg name="wind_force" default="0.25"/>
    <arg name="wind_start" default="5.0"/>
    <arg name="wind_duration" default="40.0"/>
    <arg name="wind_direction_x" default="1.0"/>
    <arg name="wind_direction_y" default="0.0"/>
    <arg name="wind_direction_z" default="0.0"/>
    <arg name="csvFilesStoring" default="false"/>
    <arg name="csvFilesStoringTime" default="60.0"/> <!-- seconds -->
    <arg name="user_account" default="cthornton"/> <!-- account name of your pc -->
    <arg name="waypoint_filter" default="false"/>
    <arg name="EKFActive" default="false"/>
    <arg name="enable_odometry_sensor_with_noise" default="false"/>
    <arg name="disable_odometry_sensor_with_noise" default="true"/>
    <arg name="enable_ground_truth_sensor" default="false"/>
    <arg name="enable_wind_plugin" default="false"/>
    <arg name="enable_laser1D" default="false"/>
    <arg name="enable_plots" default="false"/>
    <arg name="enable_imu" default="true"/>
    <arg name="laser_enabled" default="$(optenv HUSKY_LMS1XX_ENABLED 1)"/>
    <arg name="realsense_enabled" default="$(optenv HUSKY_REALSENSE_ENABLED 0)"/>


   <!-- Set up the Gazebo world -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find bebop_simulator)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find bebop_simulator)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find bebop_simulator)/worlds/$(arg world_name).world" />
  </include>

   <!-- Launch Husky 
   <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
      <arg name="laser_enabled" value="$(arg laser_enabled)"/>
      <arg name="realsense_enabled" value="$(arg realsense_enabled)"/>
      <arg name="x" value="1.0"/>
      <arg name="y" value="0.0"/>
   </include>
   -->
   <!-- Launch Move_Base for Husky 
   <include file="$(find husky_navigation)/launch/move_base.launch">
      <arg name="no_static_map" value="true"/>
   </include>  
  -->
   <!-- Launch Bebop_0 -->
    <group ns="$(arg name)_0">
    <include file="$(find bebop_simulator)/launch/spawn_bebop.launch">
       <arg name="name" value="$(arg name)0" />
       <arg name="x" value="-1"/>
       <arg name="y" value="1"/>
       <arg name="z" value="0"/>
       <arg name="wind_force" value="$(arg wind_force)"/>
       <arg name="wind_start" value="$(arg wind_start)"/>
       <arg name="wind_duration" value="$(arg wind_duration)"/>
       <arg name="wind_direction_x" value="$(arg wind_direction_x)"/>
       <arg name="wind_direction_y" value="$(arg wind_direction_y)"/>
       <arg name="wind_direction_z" value="$(arg wind_direction_z)"/>
       <!-- The disable_odometry_sensor_with_noise will only become true if enable_odometry_sensor_with_noise will is false.
       In this way, only one odometry sensor will be simulated: with or without noise. -->
       <arg name="enable_odometry_sensor_with_noise" value="$(arg enable_odometry_sensor_with_noise)"/>
       <param name="disable_odometry_sensor_with_noise" value="false" unless="$(arg enable_odometry_sensor_with_noise)" />
       <arg name="disable_odometry_sensor_with_noise" value="$(arg disable_odometry_sensor_with_noise)"/>
       <arg name="enable_ground_truth_sensor" value="$(arg enable_ground_truth_sensor)"/>
       <arg name="enable_wind_plugin" value="$(arg enable_wind_plugin)"/>
       <arg name="enable_laser1D" value="$(arg enable_laser1D)"/>
       <arg name="enable_imu" value="$(arg enable_imu)"/>
    </include>

    <!-- Launch the controller for Bebop_0 -->
    <node name="position_controller_node" pkg="bebop_simulator" type="position_controller_node" output="screen">
      <rosparam command="load" file="$(find bebop_simulator)/resource/controller_bebop.yaml" />
      <rosparam command="load" file="$(find bebop_simulator)/resource/bebop.yaml" />
      <rosparam command="load" file="$(find bebop_simulator)/resource/EKF_matrix.yaml" />
      <rosparam command="load" file="$(find bebop_simulator)/resource/waypoint_filter.yaml" />
      <param name="use_sim_time" value="$(arg use_sim_time)" />
      <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
      <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
      <param name="user_account" value="$(arg user_account)"/>
      <param name="waypoint_filter" value="$(arg waypoint_filter)"/>
      <param name="EKFActive" value="$(arg EKFActive)"/>
      <remap from="odometry" to="/$(arg name)0/odometry" />
      <remap from="odometry_gt" to="$(arg name)0/odometry_gt" />
      <remap from="filteredOutput" to="$(arg name)0/filteredOutput" />
      <remap from="referenceAngles" to="$(arg name)0/referenceAngles" />
      <remap from="stateErrors" to="$(arg name)0/stateErrors" />
      <remap from="smoothedTrajectory" to="$(arg name)0/smoothedTrajectory" />
      <remap from="command/trajectory" to="$(arg name)0/command/trajectory" />
      <remap from="uTerrComponents" to="$(arg name)0/uTerrComponents" />
      <remap from="zVelocityComponents" to="$(arg name)0/zVelocityComponents" />
      <remap from="positionAndVelocityErrors" to="$(arg name)0/positionAndVelocityErrors" />
      <remap from="angularAndAngularVelocityErrors" to="$(arg name)0/angularAndAngularVelocityErrors" />
      <remap from="command/motor_speed" to="$(arg name)0/command/motors" />
    </node>

    <!-- Launch the trajectory generator for Bebop_0--> 
   <group ns="$(arg name)0">
       <node name="waypoint_example" pkg="bebop_simulator" type="waypoint_example" output="screen" args="$(find bebop_simulator)/resource/waypoints0.txt"/>
    </group> 
    </group>

   <!-- Launch Bebop_1 -->
    <group ns="$(arg name)_1">
    <include file="$(find bebop_simulator)/launch/spawn_bebop.launch">
       <arg name="name" value="$(arg name)1" />
       <arg name="x" value="-1"/>
       <arg name="y" value="-1"/>
       <arg name="z" value="0"/>
       <arg name="wind_force" value="$(arg wind_force)"/>
       <arg name="wind_start" value="$(arg wind_start)"/>
       <arg name="wind_duration" value="$(arg wind_duration)"/>
       <arg name="wind_direction_x" value="$(arg wind_direction_x)"/>
       <arg name="wind_direction_y" value="$(arg wind_direction_y)"/>
       <arg name="wind_direction_z" value="$(arg wind_direction_z)"/>
       <!-- The disable_odometry_sensor_with_noise will only become true if enable_odometry_sensor_with_noise will is false.
       In this way, only one odometry sensor will be simulated: with or without noise. -->
       <arg name="enable_odometry_sensor_with_noise" value="$(arg enable_odometry_sensor_with_noise)"/>
       <param name="disable_odometry_sensor_with_noise" value="false" unless="$(arg enable_odometry_sensor_with_noise)" />
       <arg name="disable_odometry_sensor_with_noise" value="$(arg disable_odometry_sensor_with_noise)"/>
       <arg name="enable_ground_truth_sensor" value="$(arg enable_ground_truth_sensor)"/>
       <arg name="enable_wind_plugin" value="$(arg enable_wind_plugin)"/>
       <arg name="enable_laser1D" value="$(arg enable_laser1D)"/>
       <arg name="enable_imu" value="$(arg enable_imu)"/>
    </include>

    <!-- Launch the controller for Bebop_1 -->
    <node name="position_controller_node" pkg="bebop_simulator" type="position_controller_node" output="screen">
      <rosparam command="load" file="$(find bebop_simulator)/resource/controller_bebop.yaml" />
      <rosparam command="load" file="$(find bebop_simulator)/resource/bebop.yaml" />
      <rosparam command="load" file="$(find bebop_simulator)/resource/EKF_matrix.yaml" />
      <rosparam command="load" file="$(find bebop_simulator)/resource/waypoint_filter.yaml" />
      <param name="use_sim_time" value="$(arg use_sim_time)" />
      <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
      <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
      <param name="user_account" value="$(arg user_account)"/>
      <param name="waypoint_filter" value="$(arg waypoint_filter)"/>
      <param name="EKFActive" value="$(arg EKFActive)"/>
      <remap from="odometry" to="/$(arg name)1/odometry" />
      <remap from="odometry_gt" to="$(arg name)1/odometry_gt" />
      <remap from="filteredOutput" to="$(arg name)1/filteredOutput" />
      <remap from="referenceAngles" to="$(arg name)1/referenceAngles" />
      <remap from="stateErrors" to="$(arg name)1/stateErrors" />
      <remap from="smoothedTrajectory" to="$(arg name)1/smoothedTrajectory" />
      <remap from="command/trajectory" to="$(arg name)1/command/trajectory" />
      <remap from="uTerrComponents" to="$(arg name)1/uTerrComponents" />
      <remap from="zVelocityComponents" to="$(arg name)1/zVelocityComponents" />
      <remap from="positionAndVelocityErrors" to="$(arg name)1/positionAndVelocityErrors" />
      <remap from="angularAndAngularVelocityErrors" to="$(arg name)1/angularAndAngularVelocityErrors" />
      <remap from="command/motor_speed" to="$(arg name)1/command/motors" />
    </node>

    <!-- Launch the trajectory generator for Bebop_1 -->
   <group ns="$(arg name)1">
       <node name="waypoint_example" pkg="bebop_simulator" type="waypoint_example" output="screen" args="$(find bebop_simulator)/resource/waypoints1.txt"/>
    </group> 
    </group>

    <!-- Launch Bebop_2 -->
    <group ns="$(arg name)_2">
        <include file="$(find bebop_simulator)/launch/spawn_bebop.launch">
           <arg name="name" value="$(arg name)2" />
           <arg name="x" value="-2"/>
           <arg name="y" value="1"/>
           <arg name="z" value="0"/>
           <arg name="wind_force" value="$(arg wind_force)"/>
           <arg name="wind_start" value="$(arg wind_start)"/>
           <arg name="wind_duration" value="$(arg wind_duration)"/>
           <arg name="wind_direction_x" value="$(arg wind_direction_x)"/>
           <arg name="wind_direction_y" value="$(arg wind_direction_y)"/>
           <arg name="wind_direction_z" value="$(arg wind_direction_z)"/>
           <!-- The disable_odometry_sensor_with_noise will only become true if enable_odometry_sensor_with_noise will is false.
           In this way, only one odometry sensor will be simulated: with or without noise. -->
           <arg name="enable_odometry_sensor_with_noise" value="$(arg enable_odometry_sensor_with_noise)"/>
           <param name="disable_odometry_sensor_with_noise" value="false" unless="$(arg enable_odometry_sensor_with_noise)" />
           <arg name="disable_odometry_sensor_with_noise" value="$(arg disable_odometry_sensor_with_noise)"/>
           <arg name="enable_ground_truth_sensor" value="$(arg enable_ground_truth_sensor)"/>
           <arg name="enable_wind_plugin" value="$(arg enable_wind_plugin)"/>
           <arg name="enable_laser1D" value="$(arg enable_laser1D)"/>
           <arg name="enable_imu" value="$(arg enable_imu)"/>
        </include>
    
        <!-- Launch the controller for Bebop_2 -->
        <node name="position_controller_node" pkg="bebop_simulator" type="position_controller_node" output="screen">
          <rosparam command="load" file="$(find bebop_simulator)/resource/controller_bebop.yaml" />
          <rosparam command="load" file="$(find bebop_simulator)/resource/bebop.yaml" />
          <rosparam command="load" file="$(find bebop_simulator)/resource/EKF_matrix.yaml" />
          <rosparam command="load" file="$(find bebop_simulator)/resource/waypoint_filter.yaml" />
          <param name="use_sim_time" value="$(arg use_sim_time)" />
          <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
          <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
          <param name="user_account" value="$(arg user_account)"/>
          <param name="waypoint_filter" value="$(arg waypoint_filter)"/>
          <param name="EKFActive" value="$(arg EKFActive)"/>
          <remap from="odometry" to="/$(arg name)2/odometry" />
          <remap from="odometry_gt" to="$(arg name)2/odometry_gt" />
          <remap from="filteredOutput" to="$(arg name)2/filteredOutput" />
          <remap from="referenceAngles" to="$(arg name)2/referenceAngles" />
          <remap from="stateErrors" to="$(arg name)2/stateErrors" />
          <remap from="smoothedTrajectory" to="$(arg name)2/smoothedTrajectory" />
          <remap from="command/trajectory" to="$(arg name)2/command/trajectory" />
          <remap from="uTerrComponents" to="$(arg name)2/uTerrComponents" />
          <remap from="zVelocityComponents" to="$(arg name)2/zVelocityComponents" />
          <remap from="positionAndVelocityErrors" to="$(arg name)2/positionAndVelocityErrors" />
          <remap from="angularAndAngularVelocityErrors" to="$(arg name)2/angularAndAngularVelocityErrors" />
          <remap from="command/motor_speed" to="$(arg name)2/command/motors" />
        </node>
    
        <!-- Launch the trajectory generator for Bebop_2 -->
       <group ns="$(arg name)2">
           <node name="waypoint_example" pkg="bebop_simulator" type="waypoint_example" output="screen" args="$(find bebop_simulator)/resource/waypoints2.txt"/>
        </group>
        </group>  
    
       <!-- Launch Bebop_3 -->
        <group ns="$(arg name)_3">
        <include file="$(find bebop_simulator)/launch/spawn_bebop.launch">
           <arg name="name" value="$(arg name)3" />
           <arg name="x" value="-2"/>
           <arg name="y" value="-1"/>
           <arg name="z" value="0"/>
           <arg name="wind_force" value="$(arg wind_force)"/>
           <arg name="wind_start" value="$(arg wind_start)"/>
           <arg name="wind_duration" value="$(arg wind_duration)"/>
           <arg name="wind_direction_x" value="$(arg wind_direction_x)"/>
           <arg name="wind_direction_y" value="$(arg wind_direction_y)"/>
           <arg name="wind_direction_z" value="$(arg wind_direction_z)"/>
           <!-- The disable_odometry_sensor_with_noise will only become true if enable_odometry_sensor_with_noise will is false.
           In this way, only one odometry sensor will be simulated: with or without noise. -->
           <arg name="enable_odometry_sensor_with_noise" value="$(arg enable_odometry_sensor_with_noise)"/>
           <param name="disable_odometry_sensor_with_noise" value="false" unless="$(arg enable_odometry_sensor_with_noise)" />
           <arg name="disable_odometry_sensor_with_noise" value="$(arg disable_odometry_sensor_with_noise)"/>
           <arg name="enable_ground_truth_sensor" value="$(arg enable_ground_truth_sensor)"/>
           <arg name="enable_wind_plugin" value="$(arg enable_wind_plugin)"/>
           <arg name="enable_laser1D" value="$(arg enable_laser1D)"/>
           <arg name="enable_imu" value="$(arg enable_imu)"/>
        </include>
    
        <!-- Launch the controller for Bebop_3 -->
        <node name="position_controller_node" pkg="bebop_simulator" type="position_controller_node" output="screen">
          <rosparam command="load" file="$(find bebop_simulator)/resource/controller_bebop.yaml" />
          <rosparam command="load" file="$(find bebop_simulator)/resource/bebop.yaml" />
          <rosparam command="load" file="$(find bebop_simulator)/resource/EKF_matrix.yaml" />
          <rosparam command="load" file="$(find bebop_simulator)/resource/waypoint_filter.yaml" />
          <param name="use_sim_time" value="$(arg use_sim_time)" />
          <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
          <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
          <param name="user_account" value="$(arg user_account)"/>
          <param name="waypoint_filter" value="$(arg waypoint_filter)"/>
          <param name="EKFActive" value="$(arg EKFActive)"/>
          <remap from="odometry" to="/$(arg name)3/odometry" />
          <remap from="odometry_gt" to="$(arg name)3/odometry_gt" />
          <remap from="filteredOutput" to="$(arg name)3/filteredOutput" />
          <remap from="referenceAngles" to="$(arg name)3/referenceAngles" />
          <remap from="stateErrors" to="$(arg name)3/stateErrors" />
          <remap from="smoothedTrajectory" to="$(arg name)3/smoothedTrajectory" />
          <remap from="command/trajectory" to="$(arg name)3/command/trajectory" />
          <remap from="uTerrComponents" to="$(arg name)3/uTerrComponents" />
          <remap from="zVelocityComponents" to="$(arg name)3/zVelocityComponents" />
          <remap from="positionAndVelocityErrors" to="$(arg name)3/positionAndVelocityErrors" />
          <remap from="angularAndAngularVelocityErrors" to="$(arg name)3/angularAndAngularVelocityErrors" />
          <remap from="command/motor_speed" to="$(arg name)3/command/motors" />
        </node>
    
        <!-- Launch the trajectory generator for Bebop_3 -->
       <group ns="$(arg name)3">
           <node name="waypoint_example" pkg="bebop_simulator" type="waypoint_example" output="screen" args="$(find bebop_simulator)/resource/waypoints3.txt"/>
        </group>
        </group>

        

    <!-- send table urdf to param server -->

    <!-- push table_description to factory and spawn robot in gazebo 
    <node name="spawn_task1" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 1.0 -y 8.0 -z 0.01 -model task_model1 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task2" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 1.0 -y 11.0 -z 0.01 -model task_model2 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task3" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 1.0 -y 18.0 -z 0.01 -model task_model3 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task4" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 4.0 -y 9.0 -z 0.01 -model task_model4 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task5" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 4.0 -y 13.0 -z 0.01 -model task_model5 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task6" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 4.0 -y 19.0 -z 0.01 -model task_model6 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task7" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 7.0 -y 3.0 -z 0.01 -model task_model7 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task8" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 7.0 -y 6.0 -z 0.01 -model task_model8 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task9" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 7.0 -y 18.0 -z 0.01 -model task_model9 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task10" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 12.0 -y 4.0 -z 0.01 -model task_model10 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task11" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 12.0 -y 7.0 -z 0.01 -model task_model11 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task12" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 12.0 -y 19.0 -z 0.01 -model task_model12 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task13" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 16.0 -y 4.0 -z 0.01 -model task_model13 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task14" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 16.0 -y 9.0 -z 0.01 -model task_model14 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task15" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 16.0 -y 16.0 -z 0.01 -model task_model15 
    -file $(find gazebo_description)/models/Task/model.sdf" />

    <node name="spawn_task16" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -x 19.0 -y 12.0 -z 0.01 -model task_model16 
    -file $(find gazebo_description)/models/Task/model.sdf" />
    -->
    
   
   
</launch>
